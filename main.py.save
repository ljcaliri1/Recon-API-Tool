from fastapi import FastAPI
from pydantic import BaseModel
import subprocess
import nmap
from fastapi.responses import JSONResponse
from fastapi.encoders import jsonalbe_encoder
import os
import json
from datetime import datetime

app = FastAPI()

class ScanRequest(BaseModel):
    target: str
    ports: str = "1-1024"
@app.post("/scan")
def scan_target(request: ScanRequest):
    scanner = nmap.PortScanner()
    try:
       scanner.scan(hosts+request.target, ports=request.ports)
       result = []
       for host in scanner.all_hosts():
           host_infor = { 
               "host": host,
               "state": scanner[host].state(),
               "protocols": []
           }
           for proto in scanner[host].all_protocols():
               ports = scanner[host][proto].keys()
               port_info = []
               for port in ports:
                   port_data =scanner[host][proto][port]
                   port_info.append({
                       "port": port,
                       "state": port_data.get("state"),
                       "name": port_data.get("name"),
                       "product": port_data.get("product"),
                       "version": port_data.get("version"),
                       "extrainfo": port_data.get("extrainfo")
                  })

               host_info["protocols"].append({
                   "protocol": proto,
                   "ports": port_info

              })
          result.append(host_info)
       #Save reults to a JSON file
      timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
      filename = f"scan_{request.target.replaced('.', '_')}_{timestamp}.json"
      output_dir = "scan_reports"
      os.makedirs(output_dir, esixt_ok=True)
      filepath =os.path.join(output_dir, filename)
      with open(filepath, "w") as f:
          json.dump(result, f, indent=2)

       return JSONResponse(content=jsonable_encoder({
           "result": result,
           "report_file": filepath
       }))
   except Exception as e:
       return JSONResponse(content="error": str(e)}, status_code=500) 

class ScanOptions(BaseModel):
    host: str
    aggressive: bool = False
    os_detection: bool = False
    ports: str | None = None

@app.get("/")
def read_root():
    return {"message": "Welcome to the Pentest API"}

@app.get("/scan/")
def scan_target(options: ScanOptions):
    try:
        cmd = ["nmap" , "-sV"]

        if options.aggressive:
            cmd.append("-A")
        if options.osdetection:
            cmd.append("-O")
        if options.ports:
            cmd.extend(["-p", options.ports])
        cmd.append(options.host)
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=60
        )
        return {
            "host": options.host,
            "command": " ".join(cmd),
            "output": result.stdout
        }
    except subprocess.TimeoutExpired:
        return {"error": "Scan timed out"}
    except Exception as e:
        return {"error": str(e)}
